{"_id": "u0r1Vg0z40n7fG8L", "name": "Pick a Lock", "type": "script", "scope": "global", "author": null, "img": "icons/svg/d20-highlight.svg", "command": "const PICK_A_LOCK_TEMPLATE = \"modules/kazguls-pf2e-macros/templates/pick-a-lock.hbs\";\n\nlet SKILL_MOD = 0;\n\nconst LOCK_TYPES = [\n  {\n    key: \"custom\",\n    name: \"Custom\",\n    level: null,\n    dc: \"\",\n    requiredSuccesses: 1,\n    intervalMinutes: 2,\n    maxAttempts: 0,\n    criticalFailureBreaks: false,\n    sneakyKey: false,\n    silentMode: false,\n  },\n  {\n    key: \"poor\",\n    name: \"Poor\",\n    level: 0,\n    dc: 14,\n    requiredSuccesses: 1,\n    intervalMinutes: 2,\n    maxAttempts: 0,\n    criticalFailureBreaks: false,\n    sneakyKey: false,\n    silentMode: false,\n  },\n  {\n    key: \"average\",\n    name: \"Average\",\n    level: 1,\n    dc: 15,\n    requiredSuccesses: 1,\n    intervalMinutes: 2,\n    maxAttempts: 0,\n    criticalFailureBreaks: false,\n    sneakyKey: false,\n    silentMode: false,\n  },\n  {\n    key: \"good\",\n    name: \"Good\",\n    level: 5,\n    dc: 20,\n    requiredSuccesses: 2,\n    intervalMinutes: 10,\n    maxAttempts: 0,\n    criticalFailureBreaks: true,\n    sneakyKey: false,\n    silentMode: false,\n  },\n  {\n    key: \"superior\",\n    name: \"Superior\",\n    level: 10,\n    dc: 28,\n    requiredSuccesses: 3,\n    intervalMinutes: 10,\n    maxAttempts: 0,\n    criticalFailureBreaks: true,\n    sneakyKey: true,\n    silentMode: false,\n  },\n  {\n    key: \"incredible\",\n    name: \"Incredible\",\n    level: 15,\n    dc: 34,\n    requiredSuccesses: 3,\n    intervalMinutes: 10,\n    maxAttempts: 0,\n    criticalFailureBreaks: true,\n    sneakyKey: true,\n    silentMode: true,\n  },\n];\n\nconst DEFAULT_LOCK_KEY = \"poor\";\n\nconst FALLBACK_MODIFIER_TYPES = [\n  { value: \"circumstance\", label: \"Circumstance\" },\n  { value: \"status\", label: \"Status\" },\n  { value: \"item\", label: \"Item\" },\n  { value: \"untyped\", label: \"Untyped\" },\n];\n\nfunction localize(key, fallback) {\n  const localized = game.i18n?.localize?.(key);\n  if (localized && localized !== key) return localized;\n  return fallback ?? key;\n}\n\nfunction getModifierTypes() {\n  const types = CONFIG?.PF2E?.modifierTypes;\n  if (types && typeof types === \"object\") {\n    const entries = Object.entries(types)\n      .filter(([value]) => typeof value === \"string\" && value.length)\n      .map(([value, label]) => ({ value, label }));\n    if (entries.length) return entries;\n  }\n  return FALLBACK_MODIFIER_TYPES;\n}\n\nfunction getLockType(key) {\n  return LOCK_TYPES.find((lock) => lock.key === key) ?? LOCK_TYPES[0];\n}\n\nfunction formatLockLabel(lock) {\n  const name = localize(`PF2E.Lock.${lock.name}`, lock.name);\n  if (typeof lock.level === \"number\") {\n    const levelLabel = localize(\"PF2E.LevelLabel\", \"level\");\n    return `${name} (${levelLabel} ${lock.level})`;\n  }\n  return name;\n}\n\nfunction getLockOptions() {\n  return LOCK_TYPES.map((lock) => ({\n    key: lock.key,\n    label: formatLockLabel(lock),\n    ...lock,\n  }));\n}\n\nfunction parseNullableNumber(value) {\n  if (value === null || value === undefined || value === \"\") return null;\n  const numeric = Number(value);\n  return Number.isFinite(numeric) ? numeric : null;\n}\n\nfunction getSkillMod(actor, skillSlug) {\n  if (!actor) return 0;\n\n  const system = actor.system ?? {};\n  const skills = system.skills ?? {};\n  const lore = (system.customModifiers ?? {}).lore ?? {};\n\n  if (skillSlug.startsWith(\"lore-\")) {\n    const loreKey = skillSlug.slice(5);\n    return Number(lore[loreKey]?.totalModifier ?? 0);\n  }\n\n  const skillData = skills?.[skillSlug];\n  if (!skillData) return 0;\n\n  const modifiers = skillData?.modifiers;\n  if (Array.isArray(modifiers)) {\n    const total = modifiers.reduce((sum, modifier) => {\n      if (!modifier?.enabled) return sum;\n      return sum + Number(modifier.value ?? 0);\n    }, 0);\n    return Number(total);\n  }\n\n  if (typeof skillData.totalModifier === \"number\") return skillData.totalModifier;\n  if (typeof skillData.value === \"number\") return skillData.value;\n  if (typeof skillData.mod === \"number\") return skillData.mod;\n\n  return Number(skillData) || 0;\n}\n\nfunction getSkillOptions(actor) {\n  const system = actor?.system ?? {};\n  const skills = system.skills ?? {};\n  const options = Object.entries(skills).map(([key, value]) => ({\n    slug: key,\n    label: game.i18n?.localize?.(value?.label) ?? value?.label ?? key,\n  }));\n\n  const lores = system.lores ?? {};\n  const loreOptions = Object.entries(lores).map(([key, value]) => ({\n    slug: `lore-${key}`,\n    label: value.label ?? game.i18n?.localize?.(\"PF2E.Lore\") ?? key,\n  }));\n\n  return [...options, ...loreOptions].sort((a, b) => a.label.localeCompare(b.label));\n}\n\nasync function renderPickLockDialog(actor) {\n  const skills = getSkillOptions(actor);\n  const selectedSkill = skills.find((skill) => skill.slug === \"thievery\")?.slug ?? skills.at(0)?.slug ?? \"thievery\";\n  const initialMod = getSkillMod(actor, selectedSkill);\n\n  SKILL_MOD = initialMod;\n\n  const lockOptions = getLockOptions();\n  const initialLock = { ...getLockType(DEFAULT_LOCK_KEY) };\n\n  const templateData = {\n    skills,\n    selectedSkill,\n    skillMod: initialMod,\n    actorName: actor?.name ?? \"\",\n    actorLabel: localize(\"PF2E.Actor\", \"Actor\"),\n    additionalBonusesLabel: localize(\"PF2E.AdditionalBonuses\", \"Additional bonuses\"),\n    addBonusLabel: localize(\"PF2E.AddBonus\", \"Add bonus\"),\n    lockTypeLabel: localize(\"PF2E.LockType\", \"Lock type\"),\n    requiredSuccessesLabel: localize(\"PF2E.Check.RequiredSuccesses\", \"Required successes\"),\n    minutesPerAttemptLabel: localize(\"PF2E.MinutesPerAttempt\", \"Minutes per attempt\"),\n    maxAttemptsLabel: localize(\"PF2E.MaxAttempts\", \"Maximum attempts\"),\n    criticalFailureLabel: localize(\"PF2E.CriticalFailureStops\", \"Critical failure ends attempt?\"),\n    sneakyKeyLabel: localize(\"PF2E.SneakyKey\", \"Sneaky Key active?\"),\n    silentModeLabel: localize(\"PF2E.SilentMode\", \"Silent mode?\"),\n    bonusLabelPlaceholder: localize(\"PF2E.ModifierLabel\", \"Label\"),\n    lockTypes: lockOptions,\n    initialLock,\n  };\n\n  const content = await renderTemplate(PICK_A_LOCK_TEMPLATE, templateData);\n\n  return new Promise((resolve, reject) => {\n    const dialog = new Dialog({\n      title: game.i18n?.localize?.(\"PF2E.Actions.PickALock\") ?? \"Pick a Lock\",\n      content,\n      render: (html) => {\n        const form = html[0]?.querySelector?.(\"form\");\n        if (!form) return;\n\n        const skillSelect = form.querySelector(\"[name=skill]\");\n        const skillModField = form.querySelector(\"[name=skillMod]\");\n        const bonusList = form.querySelector(\"[data-bonus-list]\");\n        const addBonusButton = form.querySelector(\"[data-add-bonus]\");\n        const bonusPlaceholder = bonusList?.dataset?.bonusPlaceholder ?? localize(\"PF2E.ModifierLabel\", \"Label\");\n        const lockSelect = form.querySelector(\"[name=lockType]\");\n        const dcField = form.querySelector(\"[name=dc]\");\n        const successesField = form.querySelector(\"[name=requiredSuccesses]\");\n        const intervalField = form.querySelector(\"[name=intervalMinutes]\");\n        const maxAttemptsField = form.querySelector(\"[name=maxAttempts]\");\n        const criticalFailureField = form.querySelector(\"[name=criticalFailureBreaks]\");\n        const sneakyKeyField = form.querySelector(\"[name=sneakyKey]\");\n        const silentModeField = form.querySelector(\"[name=silentMode]\");\n\n        let baseSkillMod = initialMod;\n\n        const getBonusTotal = () => {\n          if (!bonusList) return 0;\n          return Array.from(bonusList.querySelectorAll(\"[data-bonus-row]\"))\n            .map((row) => Number(row.querySelector(\"[data-bonus-value]\")?.value ?? 0))\n            .reduce((sum, value) => sum + (Number.isFinite(value) ? value : 0), 0);\n        };\n\n        const updateSkillModDisplay = () => {\n          const total = baseSkillMod + getBonusTotal();\n          if (skillModField) {\n            skillModField.value = total;\n          }\n          SKILL_MOD = total;\n        };\n\n        const modifierTypes = getModifierTypes();\n\n        const createBonusRow = (bonus = {}) => {\n          if (!bonusList) return;\n\n          const row = document.createElement(\"div\");\n          row.classList.add(\"bonus-row\");\n          row.dataset.bonusRow = \"\";\n\n          const valueInput = document.createElement(\"input\");\n          valueInput.type = \"number\";\n          valueInput.step = \"1\";\n          valueInput.dataset.bonusValue = \"\";\n          valueInput.value = Number(bonus.value ?? 0) || 0;\n          valueInput.addEventListener(\"input\", () => updateSkillModDisplay());\n\n          const typeSelect = document.createElement(\"select\");\n          typeSelect.dataset.bonusType = \"\";\n          modifierTypes.forEach((type) => {\n            const option = document.createElement(\"option\");\n            option.value = type.value;\n            option.textContent = type.label;\n            typeSelect.appendChild(option);\n          });\n          const typeValues = modifierTypes.map((type) => type.value);\n          const preferredType = typeValues.includes(bonus.type) ? bonus.type : modifierTypes[0]?.value ?? \"untyped\";\n          typeSelect.value = preferredType;\n\n          const labelInput = document.createElement(\"input\");\n          labelInput.type = \"text\";\n          labelInput.dataset.bonusLabel = \"\";\n          labelInput.placeholder = bonusPlaceholder;\n          labelInput.value = bonus.label ?? \"\";\n\n          const removeButton = document.createElement(\"button\");\n          removeButton.type = \"button\";\n          removeButton.dataset.removeBonus = \"\";\n          removeButton.classList.add(\"remove-bonus\");\n          removeButton.innerHTML = \"&times;\";\n          removeButton.addEventListener(\"click\", () => {\n            row.remove();\n            updateSkillModDisplay();\n          });\n\n          row.appendChild(valueInput);\n          row.appendChild(typeSelect);\n          row.appendChild(labelInput);\n          row.appendChild(removeButton);\n\n          bonusList.appendChild(row);\n          updateSkillModDisplay();\n        };\n\n        if (bonusList) {\n          if (addBonusButton) {\n            addBonusButton.addEventListener(\"click\", () => {\n              createBonusRow();\n            });\n          }\n\n          if (!bonusList.querySelector(\"[data-bonus-row]\")) {\n            createBonusRow();\n          }\n        }\n\n        if (skillModField) {\n          skillModField.value = initialMod;\n          skillModField.disabled = true;\n        }\n\n        if (skillSelect) {\n          skillSelect.value = selectedSkill;\n          skillSelect.addEventListener(\"change\", () => {\n            const skill = skillSelect.value;\n            const mod = getSkillMod(actor, skill);\n            baseSkillMod = mod;\n            updateSkillModDisplay();\n          });\n        }\n\n        if (lockSelect) {\n          lockSelect.value = DEFAULT_LOCK_KEY;\n\n          const applyLockDefaults = (lockKey) => {\n            const lock = getLockType(lockKey);\n            if (lockKey === \"custom\") {\n              if (dcField) dcField.value = \"\";\n              if (successesField) successesField.value = \"\";\n              if (intervalField) intervalField.value = \"\";\n              if (maxAttemptsField) maxAttemptsField.value = \"\";\n              if (criticalFailureField) criticalFailureField.checked = false;\n              if (sneakyKeyField) sneakyKeyField.checked = false;\n              if (silentModeField) silentModeField.checked = false;\n              return;\n            }\n\n            if (dcField) dcField.value = lock.dc ?? \"\";\n            if (successesField) successesField.value = lock.requiredSuccesses ?? \"\";\n            if (intervalField) intervalField.value = lock.intervalMinutes ?? \"\";\n            if (maxAttemptsField) maxAttemptsField.value = lock.maxAttempts ?? \"\";\n            if (criticalFailureField) criticalFailureField.checked = Boolean(lock.criticalFailureBreaks);\n            if (sneakyKeyField) sneakyKeyField.checked = Boolean(lock.sneakyKey);\n            if (silentModeField) silentModeField.checked = Boolean(lock.silentMode);\n          };\n\n          applyLockDefaults(lockSelect.value);\n          lockSelect.addEventListener(\"change\", () => {\n            applyLockDefaults(lockSelect.value);\n          });\n        }\n\n        const reqInput =\n          form.querySelector(\"[data-req-input]\") ??\n          form.querySelector(\"[name=requestCheck]\") ??\n          form.querySelector(\"[name=request]\") ??\n          form.querySelector(\"[name=req]\");\n        const reqPayload =\n          form.querySelector(\"[data-req-payload]\") ??\n          form.querySelector(\"[name=requestPayload]\") ??\n          form.querySelector(\"[name=reqPayload]\");\n        const reqDrop =\n          form.querySelector(\"[data-req-drop]\") ??\n          form.querySelector(\"[data-inline-check-drop]\") ??\n          reqInput ??\n          null;\n\n        const updateReqPayload = (rawText) => {\n          if (!reqPayload) return;\n\n          const text = typeof rawText === \"string\" ? rawText.trim() : \"\";\n          const match = text.match(/@Check\\[[^\\]]+\\]/i);\n          reqPayload.value = match ? match[0] : \"\";\n        };\n\n        if (reqInput) {\n          reqInput.addEventListener(\"input\", () => {\n            updateReqPayload(reqInput.value);\n          });\n          reqInput.addEventListener(\"change\", () => {\n            updateReqPayload(reqInput.value);\n          });\n          updateReqPayload(reqInput.value);\n        }\n\n        if (reqDrop) {\n          const assignFromText = (text) => {\n            if (!text) return;\n            if (reqInput) {\n              reqInput.value = text;\n            }\n            updateReqPayload(text);\n          };\n\n          reqDrop.addEventListener(\"dragenter\", (event) => {\n            event.preventDefault();\n          });\n\n          reqDrop.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n          });\n\n          reqDrop.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            const droppedText = event.dataTransfer?.getData(\"text/plain\");\n            if (!droppedText) return;\n            assignFromText(droppedText.trim());\n          });\n        }\n      },\n      buttons: {\n        start: {\n          label: game.i18n?.localize?.(\"PF2E.Start\") ?? \"Start\",\n          callback: (html) => {\n            const form = html[0]?.querySelector?.(\"form\");\n            if (!form) return reject(new Error(\"Missing pick-a-lock form\"));\n\n            const skillField = form.querySelector(\"[name=skill]\");\n            const skillModField = form.querySelector(\"[name=skillMod]\");\n            const selectedSkill = skillField?.value ?? \"thievery\";\n            const baseSkillMod = getSkillMod(actor, selectedSkill);\n\n            const bonusRows = Array.from(form.querySelectorAll(\"[data-bonus-row]\"));\n            const bonuses = bonusRows.map((row) => {\n              const value = Number(row.querySelector(\"[data-bonus-value]\")?.value ?? 0);\n              const type = row.querySelector(\"[data-bonus-type]\")?.value ?? \"untyped\";\n              const label = row.querySelector(\"[data-bonus-label]\")?.value?.trim() ?? \"\";\n              return {\n                value: Number.isFinite(value) ? value : 0,\n                type,\n                label,\n              };\n            });\n            const bonusTotal = bonuses.reduce((sum, bonus) => sum + (Number.isFinite(bonus.value) ? bonus.value : 0), 0);\n            const totalSkillMod = baseSkillMod + bonusTotal;\n\n            let data;\n            if (skillModField) {\n              const wasDisabled = skillModField.disabled;\n              skillModField.value = totalSkillMod;\n              if (wasDisabled) skillModField.disabled = false;\n              const formData = new FormData(form);\n              if (wasDisabled) skillModField.disabled = true;\n              data = Object.fromEntries(formData.entries());\n            } else {\n              data = Object.fromEntries(new FormData(form).entries());\n            }\n\n            data.skill = selectedSkill;\n            data.baseSkillMod = baseSkillMod;\n            data.bonuses = bonuses;\n            data.bonusTotal = bonusTotal;\n            data.skillMod = totalSkillMod;\n\n            const lockKey = data.lockType ?? form.querySelector(\"[name=lockType]\")?.value ?? DEFAULT_LOCK_KEY;\n            const lockInfo = getLockType(lockKey);\n            data.lockType = lockKey;\n            data.lockLabel = formatLockLabel(lockInfo);\n\n            data.dc = parseNullableNumber(data.dc);\n            data.requiredSuccesses = parseNullableNumber(data.requiredSuccesses);\n            data.intervalMinutes = parseNullableNumber(data.intervalMinutes);\n            data.maxAttempts = parseNullableNumber(data.maxAttempts);\n\n            data.criticalFailureBreaks = Boolean(form.querySelector(\"[name=criticalFailureBreaks]\")?.checked ?? data.criticalFailureBreaks);\n            data.sneakyKey = Boolean(form.querySelector(\"[name=sneakyKey]\")?.checked ?? data.sneakyKey);\n            data.silentMode = Boolean(form.querySelector(\"[name=silentMode]\")?.checked ?? data.silentMode);\n\n            const reqInput = form.querySelector(\"[data-req-input]\") ?? form.querySelector(\"[name=request]\") ?? null;\n            const reqPayload = form.querySelector(\"[data-req-payload]\") ?? form.querySelector(\"[name=requestPayload]\") ?? null;\n            data.request = reqInput?.value ?? data.request ?? \"\";\n            data.requestPayload = reqPayload?.value ?? data.requestPayload ?? \"\";\n            data.requestRoll = Boolean(\n              form.querySelector(\"[name=requestCheck]\")?.checked ??\n                form.querySelector(\"[name=requestRoll]\")?.checked ??\n                data.requestRoll,\n            );\n\n            SKILL_MOD = totalSkillMod;\n\n            resolve(data);\n          },\n        },\n        cancel: {\n          label: game.i18n?.localize?.(\"Cancel\") ?? \"Cancel\",\n          callback: () => reject(new Error(\"cancelled\")),\n        },\n      },\n      default: \"start\",\n      close: () => reject(new Error(\"closed\")),\n    });\n\n    dialog.render(true);\n  });\n}\n\nasync function performPickLockRoll(actor, submission) {\n  const {\n    skill,\n    skillMod,\n    dc,\n    lockType,\n    lockLabel,\n    bonuses = [],\n    bonusTotal = 0,\n    baseSkillMod,\n  } = submission;\n\n  const totalModifier = Number(skillMod) || 0;\n  const rollFormula = `1d20 + ${totalModifier}`;\n  const roll = await (new Roll(rollFormula)).roll({ async: true });\n\n  const baseFlavor = game.i18n?.localize?.(\"PF2E.Actions.PickALock\") ?? \"Pick a Lock\";\n  const flavorParts = [`${baseFlavor} (${skill})`];\n\n  if (lockLabel && lockType) {\n    flavorParts.push(lockLabel);\n  }\n\n  const dcNumber = typeof dc === \"number\" && Number.isFinite(dc) ? dc : null;\n  if (dcNumber !== null) {\n    flavorParts.push(`DC ${dcNumber}`);\n  }\n\n  if (bonusTotal) {\n    const bonusLabel = localize(\"PF2E.BonusLabel\", \"Bonuses\");\n    const breakdown = bonuses\n      .filter((bonus) => Number.isFinite(bonus.value) && bonus.value)\n      .map((bonus) => {\n        const sign = bonus.value >= 0 ? \"+\" : \"\";\n        const type = bonus.type ? ` ${bonus.type}` : \"\";\n        const label = bonus.label ? ` (${bonus.label})` : \"\";\n        return `${sign}${bonus.value}${type}${label}`;\n      })\n      .join(\", \");\n    const summary = breakdown || `${bonusTotal >= 0 ? \"+\" : \"\"}${bonusTotal}`;\n    flavorParts.push(`${bonusLabel}: ${summary}`);\n  }\n\n  if (Number.isFinite(baseSkillMod) && bonusTotal) {\n    flavorParts.push(`${localize(\"PF2E.BaseModifier\", \"Base Mod\")}: ${baseSkillMod}`);\n  }\n\n  await roll.toMessage({\n    speaker: ChatMessage.getSpeaker({ actor }),\n    flavor: flavorParts.join(\" \u2013 \"),\n  });\n\n  if (dcNumber !== null) {\n    const successText = roll.total >= dcNumber\n      ? game.i18n?.localize?.(\"PF2E.Check.Succeeded\") ?? \"Success\"\n      : game.i18n?.localize?.(\"PF2E.Check.Failed\") ?? \"Failure\";\n    ui.notifications?.info?.(`${roll.total} vs DC ${dcNumber}: ${successText}`);\n  }\n}\n\nasync function pickALock(actor = canvas?.tokens?.controlled?.[0]?.actor ?? game.user?.character ?? null) {\n  if (!actor) {\n    ui.notifications?.warn?.(\"No actor selected for Pick a Lock\");\n    return;\n  }\n\n  try {\n    const submission = await renderPickLockDialog(actor);\n    await performPickLockRoll(actor, submission);\n  } catch (error) {\n    if (error?.message !== \"cancelled\" && error?.message !== \"closed\") {\n      console.error(error);\n    }\n  }\n}\n\nconst namespace = (globalThis.kazgulsPf2eMacros ??= {});\nnamespace.pickALock = pickALock;\nnamespace.getSkillMod = getSkillMod;\nObject.defineProperty(namespace, \"SKILL_MOD\", {\n  get: () => SKILL_MOD,\n  set: (value) => {\n    SKILL_MOD = Number(value) || 0;\n  },\n  configurable: true,\n});\n\nif (game?.modules?.get) {\n  const module = game.modules.get(\"kazguls-pf2e-macros\");\n  if (module) {\n    module.api ??= {};\n    module.api.pickALock = pickALock;\n    module.api.getSkillMod = getSkillMod;\n    Object.defineProperty(module.api, \"SKILL_MOD\", {\n      get: () => SKILL_MOD,\n      set: (value) => {\n        SKILL_MOD = Number(value) || 0;\n      },\n      configurable: true,\n    });\n  }\n}\n", "folder": null, "sort": 0, "ownership": {"default": 0}, "flags": {"core": {"sourceId": "Compendium.kazguls-pf2e-macros.macros.u0r1Vg0z40n7fG8L"}}, "_stats": {"systemId": "pf2e", "systemVersion": "5.7.0", "coreVersion": "11.309", "createdTime": 1759730852260, "modifiedTime": 1759730852260, "lastModifiedBy": null}}
