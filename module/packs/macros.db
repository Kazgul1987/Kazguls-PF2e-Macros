{"_id": "u0r1Vg0z40n7fG8L", "name": "Pick a Lock", "type": "script", "scope": "global", "author": null, "img": "icons/svg/d20-highlight.svg", "command": "// Pathfinder 2e Lock Picker v2.8.2 (Full)\n// Features:\n// - Mehrere Bonuszeilen (Item/Status/Circumstance) mit PF2e-Stacking\n// - Presets: Poor/Simple/Average/Good/Superior (setzt DC & Erfolge automatisch; \"Eigene Werte\" entsperrt)\n// - Skill-Auswahl (Thievery, Occultism, Arcana, Religion, Society, Crafting, Benutzerdefiniert)\n// - Sneaky Key (erster Erfolg +1 Fortschritt)\n// - Silent-/Foundry-WÃ¼rfel\n// - Request-Roll: Inline @Check-Link per Drag & Drop; Button wÃ¼rfelt bis Erfolg/Krit oder Krit-Fehlschlag\n// - Robuste Skill-Erkennung (neue/alte PF2e-Versionen)\n// Icon: static/icons/equipment/held-items/key-short-gold.webp\n\n/******************** Helpers ********************/\nfunction getSelectedActor() {\n  return canvas.tokens?.controlled[0]?.actor ?? game.user.character ?? null;\n}\n\n// Robust: Holt den Skillmodifikator aus neuen und alten PF2e-Versionen\nfunction getSkillMod(actor, key) {\n  if (!actor) return 0;\n\n  const alias = {\n    acrobatics: [\"acrobatics\",\"acr\"], arcana:[\"arcana\",\"arc\"], athletics:[\"athletics\",\"ath\"],\n    crafting:[\"crafting\",\"cra\"], deception:[\"deception\",\"dec\"], diplomacy:[\"diplomacy\",\"dip\"],\n    intimidation:[\"intimidation\",\"itm\"], medicine:[\"medicine\",\"med\"], nature:[\"nature\",\"nat\"],\n    occultism:[\"occultism\",\"occ\"], performance:[\"performance\",\"prf\"], religion:[\"religion\",\"rel\"],\n    society:[\"society\",\"soc\"], stealth:[\"stealth\",\"ste\"], survival:[\"survival\",\"sur\"],\n    thievery:[\"thievery\",\"thi\"], perception:[\"perception\",\"per\"]\n  };\n\n  const keys = [...(alias[key] ?? []), key].filter((v, i, a) => typeof v === \"string\" && a.indexOf(v) === i);\n\n  // 1) Neue PF2e-API\n  for (const k of keys) {\n    try {\n      const stat = actor.getStatistic?.(k);\n      const v = stat?.check?.mod ?? stat?.mod;\n      if (typeof v === \"number\") return v;\n    } catch {}\n  }\n\n  // 2) Klassisch (actor.skills)\n  for (const k of keys) {\n    const s = actor?.skills?.[k];\n    const v = s?.check?.mod ?? s?.totalModifier ?? s?.mod;\n    if (typeof v === \"number\") return v;\n  }\n\n  // 3) Systemdaten (actor.system.skills)\n  for (const k of keys) {\n    const s = actor?.system?.skills?.[k];\n    const v = s?.check?.mod ?? s?.totalModifier ?? s?.mod ?? s?.value;\n    if (typeof v === \"number\") return v;\n  }\n\n  // 4) Fallback auf Attribut\n  const abilityBySkill = {\n    thievery:\"dex\", stealth:\"dex\", acrobatics:\"dex\",\n    athletics:\"str\", religion:\"wis\", medicine:\"wis\", survival:\"wis\", perception:\"wis\",\n    arcana:\"int\", occultism:\"int\", crafting:\"int\", society:\"int\", nature:\"wis\",\n    deception:\"cha\", diplomacy:\"cha\", intimidation:\"cha\", performance:\"cha\"\n  };\n  const abil = abilityBySkill[key] ?? \"dex\";\n  return actor?.abilities?.[abil]?.mod ?? actor?.system?.abilities?.[abil]?.mod ?? 0;\n}\n\nconst rollD20Silent = () => Math.floor(Math.random()*20)+1;\nconst rollD20Foundry = () => {\n  const r = new Roll(\"1d20\").evaluate({async:false});\n  const face = Number(r.dice?.[0]?.results?.[0]?.result ?? r.total);\n  return Number.isFinite(face) ? face : rollD20Silent();\n};\nconst num = (v,f=0)=>{ const n = Number(v); return Number.isNaN(n) ? f : n; };\nconst on  = (v)=>!!v && (v===\"on\" || v===true);\n\n// PF2e-Stacking: Item/Status â†’ bester Einzelwert; Circumstance â†’ Summe\nfunction aggregateTyped(values, types) {\n  const list = values.map((v,i)=>({v:Number(v), t:types[i]})).filter(x=>Number.isFinite(x.v));\n  const by = t => list.filter(x=>x.t===t).map(x=>x.v);\n  const pickOneByAbs = arr => arr.reduce((acc,v)=> (acc===undefined || Math.abs(v)>Math.abs(acc)) ? v : acc, 0) || 0;\n  return {\n    itemEff:   pickOneByAbs(by(\"item\")),\n    statusEff: pickOneByAbs(by(\"status\")),\n    circSum:   by(\"circumstance\").reduce((a,b)=>a+b,0)\n  };\n}\n\n/******************** Presets ********************/\nconst LOCK_PRESETS = {\n  \"Poor (level 0)\":      { dc: 15, needed: 2 },\n  \"Simple (level 1)\":    { dc: 20, needed: 3 },\n  \"Average (level 3)\":   { dc: 25, needed: 4 },\n  \"Good (level 9)\":      { dc: 30, needed: 5 },\n  \"Superior (level 17)\": { dc: 40, needed: 6 },\n  \"Eigene Werte\":        { dc: 20, needed: 3 }\n};\n\n/******************** Actor ********************/\nconst actor = getSelectedActor();\nif (!actor) return ui.notifications.warn(\"Bitte einen Token auswÃ¤hlen oder ein Charakterblatt Ã¶ffnen.\");\nconst DEFAULT_SKILL_KEY = \"thievery\";\nconst DEFAULT_SKILL_MOD = getSkillMod(actor, DEFAULT_SKILL_KEY);\n\n/******************** Dialog ********************/\nconst dialogHTML = `\n<form>\n  <div class=\"form-group\"><label>Charakter</label><div>${actor.name}</div></div>\n\n  <div class=\"form-group\"><label>Skill</label>\n    <select name=\"skill\">\n      <option value=\"thievery\">Thievery</option>\n      <option value=\"occultism\">Occultism</option>\n      <option value=\"arcana\">Arcana</option>\n      <option value=\"religion\">Religion</option>\n      <option value=\"society\">Society</option>\n      <option value=\"crafting\">Crafting</option>\n      <option value=\"custom\">Benutzerdefiniert</option>\n    </select>\n  </div>\n\n  <div class=\"form-group\"><label>Skill-Modifikator</label>\n    <input type=\"number\" name=\"skillmod\" value=\"${DEFAULT_SKILL_MOD}\" disabled/>\n    <small>(automatisch; bei â€žBenutzerdefiniertâ€œ editierbar)</small>\n  </div>\n\n  <fieldset style=\"border:1px solid #888; padding:.5rem; border-radius:.5rem\">\n    <legend>ZusÃ¤tzliche Boni</legend>\n    <div id=\"bonus-list\"></div>\n    <button type=\"button\" name=\"addBonus\">+ Bonus hinzufÃ¼gen</button>\n    <small>Stacking: Item/Status â†’ bester Einzelwert; Circumstance â†’ Summe.</small>\n  </fieldset>\n\n  <div class=\"form-group\"><label>Schlosstyp</label>\n    <select name=\"locktype\">\n      ${Object.keys(LOCK_PRESETS).map(k=>`<option value=\"${k}\">${k}</option>`).join(\"\")}\n    </select>\n  </div>\n\n  <div class=\"form-group\"><label>DC</label><input type=\"number\" name=\"dc\" value=\"${LOCK_PRESETS[\"Superior (level 17)\"].dc}\"/></div>\n  <div class=\"form-group\"><label>BenÃ¶tigte Erfolge</label><input type=\"number\" name=\"needed\" value=\"${LOCK_PRESETS[\"Superior (level 17)\"].needed}\"/></div>\n  <div class=\"form-group\"><label>Minuten pro Versuch</label><input type=\"number\" name=\"minutes\" value=\"1\" min=\"0\"/></div>\n  <div class=\"form-group\"><label>Max. Versuche (0 = Auto)</label><input type=\"number\" name=\"max\" value=\"0\" min=\"0\"/></div>\n  <div class=\"form-group\"><label>Kritischer Fehlschlag bricht ab?</label><input type=\"checkbox\" name=\"stopOnCritFail\" checked/></div>\n  <div class=\"form-group\"><label>Sneaky Key aktiv?</label><input type=\"checkbox\" name=\"sneaky\"/></div>\n  <div class=\"form-group\"><label>Whisper an mich?</label><input type=\"checkbox\" name=\"whisper\"/></div>\n  <div class=\"form-group\"><label>Silent-Modus?</label><input type=\"checkbox\" name=\"silent\" checked/></div>\n  <hr/>\n  <div class=\"form-group\">\n    <label><input type=\"checkbox\" name=\"reqEnable\"/> Request-Roll aktivieren</label>\n    <div id=\"reqContainer\" style=\"display:none;margin-top:.25rem\">\n      <div style=\"font-size:12px;margin-bottom:.25rem\">\n        Ziehe einen Inline-Check hier rein (z. B. <code>@Check[type:thievery|dc:40]{Pick a Lock}</code>).\n      </div>\n      <div id=\"reqDrop\" style=\"border:1px dashed #888;padding:.5rem;min-height:2.5rem;border-radius:.25rem;background:#f7f7f7\"\n           contenteditable=\"true\" spellcheck=\"false\"></div>\n      <input type=\"hidden\" name=\"reqPayload\" value=\"\"/>\n    </div>\n  </div>\n</form>\n`;\n\nconst form = await new Promise(resolve => {\n  new Dialog({\n    title: \"Pick a Lock â€“ HintergrundwÃ¼rfe\",\n    content: dialogHTML,\n    buttons: {\n      ok: { label: \"Start\", callback: html => {\n        const formEl = html[0].querySelector(\"form\");\n        const fd = new FormData(formEl);\n        const data = Object.fromEntries(fd.entries());\n        // Bonuslisten einsammeln\n        data.bonusValues = fd.getAll(\"bonusValue\").map(x=>Number(x));\n        data.bonusTypes  = fd.getAll(\"bonusType\");\n        resolve(data);\n      }},\n      cancel: { label: \"Abbrechen\", callback: ()=>resolve(null) }\n    },\n    default: \"ok\",\n    render: (html) => {\n      const $html = html;\n      const $skill = $html.find('select[name=\"skill\"]');\n      const $skillmod = $html.find('input[name=\"skillmod\"]');\n      const $locktype = $html.find('select[name=\"locktype\"]');\n      const $dc = $html.find('input[name=\"dc\"]');\n      const $need = $html.find('input[name=\"needed\"]');\n\n      // Bonus-UI\n      const $bonusList = $html.find('#bonus-list');\n      const $addBtn = $html.find('button[name=\"addBonus\"]');\n      const makeRow = (value=0, type=\"item\")=>{\n        const row = document.createElement(\"div\");\n        row.className = \"bonus-row\";\n        row.style.cssText = \"display:flex;gap:.5rem;align-items:center;margin-bottom:.25rem\";\n        row.innerHTML = `\n          <input type=\"number\" name=\"bonusValue\" value=\"${value}\" style=\"width:6rem\"/>\n          <select name=\"bonusType\" style=\"flex:1\">\n            <option value=\"item\"${type===\"item\"?\" selected\":\"\"}>Item</option>\n            <option value=\"status\"${type===\"status\"?\" selected\":\"\"}>Status</option>\n            <option value=\"circumstance\"${type===\"circumstance\"?\" selected\":\"\"}>Circumstance</option>\n          </select>\n          <button type=\"button\" class=\"del-bonus\">ðŸ—‘</button>\n        `;\n        row.querySelector(\".del-bonus\").addEventListener(\"click\", ()=>row.remove());\n        $bonusList[0].appendChild(row);\n      };\n      makeRow(0,\"item\");\n      $addBtn.on(\"click\", ()=>makeRow(0,\"circumstance\"));\n\n      // Preset/Skill Handling\n      const applySkill = () => {\n        const key = $skill.val();\n        if (key === \"custom\") $skillmod.prop(\"disabled\", false);\n        else { $skillmod.val(getSkillMod(actor, key)).prop(\"disabled\", true); }\n      };\n      const applyPreset = () => {\n        const key = $locktype.val();\n        const p = LOCK_PRESETS[key] ?? LOCK_PRESETS[\"Simple (level 1)\"];\n        if (key !== \"Eigene Werte\") { $dc.val(p.dc).prop(\"disabled\", true); $need.val(p.needed).prop(\"disabled\", true); }\n        else { $dc.prop(\"disabled\", false); $need.prop(\"disabled\", false); }\n      };\n      applySkill(); applyPreset();\n      $skill.on(\"change\", applySkill);\n      $locktype.on(\"change\", applyPreset);\n\n      // Request-Roll-UI\n      const reqEnable = $html.find('input[name=\"reqEnable\"]')[0];\n      const reqContainer = $html.find('#reqContainer')[0];\n      const reqDrop = $html.find('#reqDrop')[0];\n      const reqPayload = $html.find('input[name=\"reqPayload\"]')[0];\n\n      reqEnable.addEventListener(\"change\", ()=> reqContainer.style.display = reqEnable.checked ? \"block\" : \"none\");\n\n      const extractInlineCheck = (htmlText) => {\n        const m = (htmlText || \"\").match(/@Check\\[[^\\]]+\\][^{]*(\\{[^}]*\\})?/i);\n        return m ? m[0] : (htmlText || \"\").trim();\n      };\n      reqDrop.addEventListener(\"drop\", ev => {\n        ev.preventDefault();\n        const htmlData = ev.dataTransfer.getData(\"text/html\");\n        const textData = ev.dataTransfer.getData(\"text/plain\");\n        const grabbed = extractInlineCheck(htmlData || textData || \"\");\n        reqDrop.innerText = grabbed || \"\";\n        reqPayload.value = grabbed || \"\";\n      });\n      reqDrop.addEventListener(\"paste\", ev => {\n        const text = (ev.clipboardData || window.clipboardData).getData('text');\n        const grabbed = extractInlineCheck(text || \"\");\n        ev.preventDefault();\n        reqDrop.innerText = grabbed || \"\";\n        reqPayload.value = grabbed || \"\";\n      });\n      reqDrop.addEventListener(\"input\", ()=> { reqPayload.value = reqDrop.innerText.trim(); });\n    }\n  }).render(true);\n});\nif (!form) return;\n\n/******************** Parse Grunddaten ********************/\nconst skillKey = form.skill;\nconst SKILL_MOD = (skillKey === \"custom\")\n  ? num(form.skillmod, 0)\n  : getSkillMod(actor, skillKey);\nconst preset  = LOCK_PRESETS[form.locktype] ?? LOCK_PRESETS[\"Simple (level 1)\"];\nlet DC      = (form.locktype !== \"Eigene Werte\") ? preset.dc     : num(form.dc, preset.dc);\nlet NEEDED  = (form.locktype !== \"Eigene Werte\") ? preset.needed : Math.max(1, num(form.needed, preset.needed));\nconst MINS    = Math.max(0, num(form.minutes, 1));\nconst STOPCF  = on(form.stopOnCritFail);\nlet sneaky    = on(form.sneaky);\nconst WHISPER = on(form.whisper);\nconst SILENT  = on(form.silent);\n\nconst bonusValues = Array.isArray(form.bonusValues) ? form.bonusValues : [];\nconst bonusTypes  = Array.isArray(form.bonusTypes)  ? form.bonusTypes  : [];\nconst { itemEff, statusEff, circSum } = aggregateTyped(bonusValues, bonusTypes);\n\nconst MOD = SKILL_MOD + itemEff + statusEff + circSum;\nconst d20 = () => (SILENT ? rollD20Silent() : rollD20Foundry());\n\nlet MAX_TRIES = Math.max(0, num(form.max, 0));\nif (!MAX_TRIES) MAX_TRIES = Math.min(300, Math.max(30, NEEDED * 10));\nconst HARD_CAP = 1000;\n\n// Machbarkeit (inkl. nat20-Shift)\nconst bestTotal = MOD + 20;\nconst successPossible = (bestTotal >= DC) || (bestTotal >= DC - 10);\nif (!successPossible) {\n  return ui.notifications.error(`Mit ${skillKey} ${MOD>=0?\"+\":\"\"}${MOD} gegen DC ${DC} ist kein Fortschritt mÃ¶glich (selbst mit nat 20 nur Fehlschlag).`);\n}\n\n/******************** Lock-Pick Simulation ********************/\nfunction degree(total, dc, face) {\n  let deg;\n  if (total >= dc + 10) deg = 3; else if (total >= dc) deg = 2;\n  else if (total <= dc - 10) deg = 0; else deg = 1;\n  if (face === 20) deg = Math.min(3, deg + 1);\n  if (face === 1)  deg = Math.max(0, deg - 1);\n  return deg; // 0 CF, 1 F, 2 S, 3 CS\n}\n\nlet progress=0, tries=0, minutes=0, broken=false;\nconst log=[];\nwhile (progress < NEEDED && tries < MAX_TRIES && tries < HARD_CAP) {\n  tries++;\n  const face = d20();\n  const total = face + MOD;\n  const deg = degree(total, DC, face);\n  let step=0, note=\"\";\n  if (deg===3){ step=2; note=\"Kritischer Erfolg (+2)\"; }\n  else if (deg===2){ step=1; note=\"Erfolg (+1)\"; }\n  else if (deg===1){ step=0; note=\"Fehlschlag\"; }\n  else { note=\"Kritischer Fehlschlag â€“ Werkzeuge beschÃ¤digt!\"; broken=true; if (STOPCF){ minutes+=MINS; log.push({tries, face, total, deg, step, note}); break; } }\n  if (sneaky && (deg===2 || deg===3)) { step += 1; note += \" | Sneaky Key: +1 Fortschritt\"; sneaky=false; }\n  progress += step; minutes  += MINS;\n  log.push({tries, face, total, deg, step, note});\n  if (progress >= NEEDED) break;\n}\n\n/******************** Chat Output + Request-Roll Button ********************/\nconst skillLabelMap = {thievery:\"Thievery\",occultism:\"Occultism\",arcana:\"Arcana\",religion:\"Religion\",society:\"Society\",crafting:\"Crafting\",custom:\"Benutzerdefiniert\"};\nconst bonusBreakdown = `<small>Effektiv: Item ${itemEff>=0?\"+\":\"\"}${itemEff}, Status ${statusEff>=0?\"+\":\"\"}${statusEff}, Circumstance ${circSum>=0?\"+\":\"\"}${circSum}</small>`;\nconst finish =\n  (progress >= NEEDED) ? `<b style=\"color:green\">Schloss geÃ¶ffnet</b>` :\n  (broken && STOPCF)    ? `<b style=\"color:#b00\">Abbruch: Kritischer Fehlschlag (Werkzeugbruch)</b>` :\n  (tries >= MAX_TRIES)  ? `<b style=\"color:orange\">Abbruch: Versuchs-Limit erreicht</b>` :\n                          `<b>Nicht geschafft</b>`;\n\nconst rows = log.map(r=>{\n  const color = (r.deg===3?\"#0a0\":r.deg===2?\"#060\":r.deg===0?\"#b00\":\"#666\");\n  const grad  = [\"Krit-Fehl\",\"Fehl\",\"Erfolg\",\"Krit-Erfolg\"][r.deg];\n  return `<tr>\n    <td style=\"text-align:right\">${r.tries}</td>\n    <td style=\"text-align:center\">${r.face}</td>\n    <td style=\"text-align:right\">${r.total}</td>\n    <td style=\"color:${color}\">${grad}</td>\n    <td style=\"text-align:right\">+${r.step}</td>\n    <td>${r.note}</td>\n  </tr>`;\n}).join(\"\");\n\n// Request-Roll\nconst reqEnabled = on(form.reqEnable);\nconst reqPayload = (form.reqPayload ?? \"\").trim();\n\nfunction parseInlineCheckTag(s) {\n  const tag = (/@Check\\[(.*?)\\]/i).exec(s);\n  if (!tag) return null;\n  const inside = tag[1];\n  const parts = inside.split(\"|\").map(t=>t.trim());\n  const out = {};\n  for (const p of parts) {\n    const [k, v] = p.split(\":\");\n    if (!k || v===undefined) continue;\n    out[k.trim().toLowerCase()] = v.trim().toLowerCase();\n  }\n  const type = out.type || \"thievery\";\n  const dc = Number(out.dc ?? \"0\");\n  return { type, dc, raw: s };\n}\n\nlet reqSectionHTML = \"\";\nlet reqData = null;\nif (reqEnabled) {\n  reqData = parseInlineCheckTag(reqPayload);\n  if (reqData && Number.isFinite(reqData.dc) && reqData.dc>0) {\n    const pretty = reqPayload.replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");\n    reqSectionHTML = `\n      <hr/>\n      <div><b>Request-Roll:</b> <code>${pretty}</code></div>\n      <button class=\"pf2e-reqroll-btn\" data-msg=\"__MSGID__\" data-type=\"${reqData.type}\" data-dc=\"${reqData.dc}\">WÃ¼rfeln bis Erfolg/KritErfolg oder KritFehlschlag</button>\n      <div class=\"pf2e-reqroll-note\" style=\"font-size:12px;opacity:.8\">Bitte einen Token auswÃ¤hlen; nat20/nat1 Erfolgsgrad-Shift aktiv.</div>\n    `;\n  } else {\n    reqSectionHTML = `\n      <hr/>\n      <div style=\"color:#b00\"><b>Request-Roll:</b> UngÃ¼ltiger oder fehlender @Check-Tag.</div>\n    `;\n  }\n}\n\nconst message = await ChatMessage.create({\n  speaker: ChatMessage.getSpeaker({actor}),\n  content: `\n    <div class=\"pf2e chat-card\">\n      <header class=\"card-header flexrow\">\n        <img src=\"static/icons/equipment/held-items/key-short-gold.webp\" width=\"36\" height=\"36\"/>\n        <h3>Pick a Lock â€“ HintergrundwÃ¼rfe</h3>\n      </header>\n      <section class=\"card-content\">\n        <p><b>Skill:</b> ${skillLabelMap[skillKey] ?? skillKey} | <b>Wurfmod. gesamt:</b> ${MOD>=0?\"+\":\"\"}${MOD}<br/>${bonusBreakdown}</p>\n        <p><b>Schlosstyp:</b> ${form.locktype} | <b>DC:</b> ${DC} | <b>Erfolge:</b> ${NEEDED} | <b>Modus:</b> ${SILENT?\"Silent\":\"Foundry\"}</p>\n        <p><b>Versuche:</b> ${tries} | <b>Fortschritt:</b> ${progress}/${NEEDED} | <b>Zeit:</b> ${minutes} Min.</p>\n        <p>${finish}${broken && STOPCF ? \"<br/><i>Werkzeuge beschÃ¤digt â€“ Ersatzpicks nÃ¶tig.</i>\" : \"\"}</p>\n        <details><summary>WÃ¼rfelverlauf</summary>\n          <table style=\"width:100%; border-collapse:collapse;\">\n            <thead><tr><th>#</th><th>d20</th><th>Gesamt</th><th>Grad</th><th>Fortschr.</th><th>Notiz</th></tr></thead>\n            <tbody>${rows || \"<tr><td colspan='6'>Keine Versuche</td></tr>\"}</tbody>\n          </table>\n        </details>\n        ${reqSectionHTML.replace(\"__MSGID__\", \"PENDING\")}\n      </section>\n    </div>\n  `,\n  whisper: (WHISPER ? [game.user.id] : []),\n  flags: { \"pf2e-lockpicker\": { req: (reqData ? { type: reqData.type, dc: reqData.dc } : null) } }\n});\n\n// Button-Handler binden\nconst mId = message.id;\nconst html = await message.getHTML();\nhtml.find(\".pf2e-reqroll-btn\").attr(\"data-msg\", mId);\n\n// Einmaliger Hook: Button klickt â†’ wÃ¼rfeln bis Erfolg/Krit oder Krit-Fehlschlag\nHooks.on(\"renderChatMessage\", function handler(msg, jHtml) {\n  if (msg.id !== mId) return;\n  const btn = jHtml.find(\".pf2e-reqroll-btn\");\n  if (!btn.length) return;\n\n  btn.off(\"click\").on(\"click\", async ()=>{\n    const clickActor = canvas.tokens?.controlled[0]?.actor ?? game.user.character;\n    if (!clickActor) return ui.notifications.warn(\"Bitte einen Token auswÃ¤hlen (fÃ¼r Request-Roll).\");\n\n    const type = btn.attr(\"data-type\") || msg.getFlag(\"pf2e-lockpicker\",\"req\")?.type || \"thievery\";\n    const dc   = Number(btn.attr(\"data-dc\") || msg.getFlag(\"pf2e-lockpicker\",\"req\")?.dc || 0);\n    if (!Number.isFinite(dc) || dc<=0) return ui.notifications.error(\"Request-Roll: UngÃ¼ltiger DC.\");\n\n    const mod = getSkillMod(clickActor, type) ?? 0;\n    const SIL = true; // Request-Rolls leise\n    const d20f = ()=> SIL ? rollD20Silent() : rollD20Foundry();\n\n    function deg(total, dc, face) {\n      let g;\n      if (total >= dc+10) g=3; else if (total>=dc) g=2; else if (total<=dc-10) g=0; else g=1;\n      if (face===20) g=Math.min(3,g+1);\n      if (face===1)  g=Math.max(0,g-1);\n      return g;\n    }\n\n    const maxLoops = 200;\n    let i=0; const logs=[];\n    let stopReason = \"â€”\";\n    while (i<maxLoops) {\n      i++;\n      const face = d20f();\n      const total = face + mod;\n      const g = deg(total, dc, face);\n      logs.push({i, face, total, g});\n      if (g===3) { stopReason = \"Kritischer Erfolg\"; break; }\n      if (g===2) { stopReason = \"Erfolg\"; break; }\n      if (g===0) { stopReason = \"Kritischer Fehlschlag\"; break; }\n      // g===1 â†’ weiter\n    }\n\n    const rows = logs.map(r=>{\n      const color = (r.g===3?\"#0a0\":r.g===2?\"#060\":r.g===0?\"#b00\":\"#666\");\n      const grad  = [\"Krit-Fehl\",\"Fehl\",\"Erfolg\",\"Krit-Erfolg\"][r.g];\n      return `<tr>\n        <td style=\"text-align:right\">${r.i}</td>\n        <td style=\"text-align:center\">${r.face}</td>\n        <td style=\"text-align:right\">${r.total}</td>\n        <td style=\"color:${color}\">${grad}</td>\n      </tr>`;\n    }).join(\"\");\n\n    const out = `\n      <div class=\"pf2e chat-card\">\n        <header class=\"card-header flexrow\">\n          <img src=\"static/icons/equipment/held-items/key-short-gold.webp\" width=\"36\" height=\"36\"/>\n          <h3>Request-Roll Ergebnis â€“ ${clickActor.name}</h3>\n        </header>\n        <section class=\"card-content\">\n          <p><b>Check:</b> ${type} vs. DC ${dc} | <b>Mod:</b> ${mod>=0?\"+\":\"\"}${mod}</p>\n          <p><b>Stop:</b> ${stopReason} &nbsp; | &nbsp; <b>WÃ¼rfe:</b> ${logs.length}</p>\n          <details><summary>Verlauf</summary>\n            <table style=\"width:100%; border-collapse:collapse;\">\n              <thead><tr><th>#</th><th>d20</th><th>Gesamt</th><th>Grad</th></tr></thead>\n              <tbody>${rows}</tbody>\n            </table>\n          </details>\n        </section>\n      </div>\n    `;\n    ChatMessage.create({ speaker: ChatMessage.getSpeaker({actor: clickActor}), content: out });\n  });\n\n  // nur einmal binden\n  Hooks.off(\"renderChatMessage\", handler);\n});\n\n/******************** GM-Whisper bei Werkzeugbruch ********************/\nif (broken && STOPCF) {\n  const gmIds = game.users.filter(u=>u.isGM).map(u=>u.id);\n  if (gmIds.length) {\n    ChatMessage.create({\n      speaker: ChatMessage.getSpeaker({actor}),\n      content: `<b>Hinweis:</b> ${actor.name} hat beim Schloss einen kritischen Fehlschlag (Werkzeuge beschÃ¤digt).`,\n      whisper: gmIds\n    });\n  }\n}\n", "folder": null, "sort": 0, "ownership": {"default": 0}, "flags": {"core": {"sourceId": "Compendium.kazguls-pf2e-macros.macros.u0r1Vg0z40n7fG8L"}}, "_stats": {"systemId": "pf2e", "systemVersion": "5.7.0", "coreVersion": "11.309", "createdTime": 1759730852260, "modifiedTime": 1759730852260, "lastModifiedBy": null}}
{"_id": "q96u1cP1A8JZhiyx", "name": "Sell for Gold", "type": "script", "scope": "global", "author": null, "img": "icons/svg/coins.svg", "command": "const SELL_LOOT_ACTOR_NAME = \"Sell\";\nconst COIN_VALUES = { pp: 1000, gp: 100, sp: 10, cp: 1 };\n\nconst readCoinObject = (source) => {\n  if (!source || typeof source !== \"object\") return 0;\n  let total = 0;\n  for (const [denom, multiplier] of Object.entries(COIN_VALUES)) {\n    const direct = source[denom];\n    const upper = source[typeof denom === \"string\" ? denom.toUpperCase() : denom];\n    const value = Number(direct ?? upper);\n    if (Number.isFinite(value)) total += value * multiplier;\n  }\n  return total;\n};\n\nconst parseCoinString = (value) => {\n  if (typeof value !== \"string\" || !value.trim()) return 0;\n  if (game?.pf2e?.Coins?.fromString) {\n    try {\n      const coins = game.pf2e.Coins.fromString(value);\n      const copper = coins?.copperValue ?? coins?.copper;\n      if (Number.isFinite(copper)) return copper;\n    } catch (error) {\n      console.warn(\"Sell macro | Failed to parse coin string via PF2e API\", error);\n    }\n  }\n\n  let total = 0;\n  let matched = false;\n  const pattern = /(-?[\\d.,]+)\\s*(pp|gp|sp|cp)/gi;\n  for (const match of value.matchAll(pattern)) {\n    matched = true;\n    const amount = Number(match[1]?.replace?.(\",\", \".\"));\n    const denom = match[2]?.toLowerCase?.();\n    if (!Number.isFinite(amount) || !denom) continue;\n    const multiplier = COIN_VALUES[denom];\n    if (!multiplier) continue;\n    total += amount * multiplier;\n  }\n\n  if (matched) return total;\n\n  const numeric = Number(value);\n  return Number.isFinite(numeric) ? numeric : 0;\n};\n\nconst coinsToCopper = (value) => {\n  if (!value) return 0;\n  if (typeof value === \"number\") return Number.isFinite(value) ? value : 0;\n  if (typeof value === \"string\") return parseCoinString(value);\n\n  if (game?.pf2e?.Coins && value instanceof game.pf2e.Coins) {\n    const copper = value?.copperValue ?? value?.copper;\n    if (Number.isFinite(copper)) return copper;\n  }\n\n  const copperValue = Number(value?.copperValue ?? value?.copper);\n  if (Number.isFinite(copperValue)) return copperValue;\n\n  let total = 0;\n  if (typeof value === \"object\") {\n    total += readCoinObject(value);\n\n    if (value.value && typeof value.value === \"object\") {\n      total += readCoinObject(value.value);\n    } else if (typeof value.value === \"string\") {\n      total += parseCoinString(value.value);\n    } else if (Number.isFinite(Number(value.value))) {\n      const denom = String(value.denomination ?? value.type ?? \"\").toLowerCase();\n      const multiplier = COIN_VALUES[denom];\n      if (multiplier) total += Number(value.value) * multiplier;\n    }\n  }\n\n  return total;\n};\n\nconst copperToCoins = (value) => {\n  let remaining = Math.max(0, Math.floor(Number(value) || 0));\n  const result = { pp: 0, gp: 0, sp: 0, cp: 0 };\n\n  for (const [denom, multiplier] of Object.entries(COIN_VALUES)) {\n    if (denom === \"cp\") continue;\n    const amount = Math.floor(remaining / multiplier);\n    result[denom] = amount;\n    remaining -= amount * multiplier;\n  }\n\n  result.cp = remaining;\n  return result;\n};\n\nconst formatCoins = (coins) => {\n  if (!coins || typeof coins !== \"object\") return \"0 cp\";\n  const parts = [];\n  for (const denom of [\"pp\", \"gp\", \"sp\", \"cp\"]) {\n    const amount = Math.floor(Number(coins[denom]) || 0);\n    if (amount) parts.push(`${amount} ${denom}`);\n  }\n  return parts.length ? parts.join(\", \") : \"0 cp\";\n};\n\nconst getItemQuantity = (item) => {\n  const value = Number(item?.system?.quantity ?? item?.quantity ?? 0);\n  return Number.isFinite(value) && value > 0 ? value : 0;\n};\n\nconst getItemUnitPriceInCopper = (item) => {\n  const price = item?.system?.price ?? item?.price;\n  if (!price) return 0;\n\n  const perRaw = Number(price?.per ?? 1);\n  const per = Number.isFinite(perRaw) && perRaw > 0 ? perRaw : 1;\n\n  const rawValue = coinsToCopper(price?.value ?? price);\n  if (rawValue > 0) return rawValue / per;\n\n  if (Number.isFinite(Number(price?.copperValue ?? price?.copper))) {\n    return Number(price.copperValue ?? price.copper) / per;\n  }\n\n  if (typeof price?.value === \"string\") {\n    const parsed = parseCoinString(price.value);\n    if (parsed > 0) return parsed / per;\n  }\n\n  if (Number.isFinite(Number(price?.value))) {\n    const denom = String(price?.denomination ?? price?.type ?? \"\").toLowerCase();\n    const multiplier = COIN_VALUES[denom];\n    if (multiplier) return (Number(price.value) * multiplier) / per;\n  }\n\n  if (typeof price === \"string\") {\n    const parsed = parseCoinString(price);\n    if (parsed > 0) return parsed / per;\n  }\n\n  return 0;\n};\n\nconst performSale = async (actor, percentage) => {\n  const items = Array.from(actor?.items ?? []);\n  const sellable = items.filter((item) => getItemQuantity(item) > 0);\n  if (!sellable.length) {\n    ui.notifications?.warn?.(game.i18n.localize?.(\"PF2E.SellNoItems\") ?? \"There are no items to sell.\");\n    return;\n  }\n\n  const baseFactor = Math.max(0, Number(percentage) || 0) / 100;\n  let copperTotal = 0;\n\n  for (const item of sellable) {\n    const quantity = getItemQuantity(item);\n    if (!quantity) continue;\n    const unitPrice = getItemUnitPriceInCopper(item);\n    if (!(unitPrice > 0)) continue;\n    const factor = item.type === \"treasure\" ? 1 : baseFactor;\n    if (factor <= 0) continue;\n    copperTotal += unitPrice * quantity * factor;\n  }\n\n  const copperEarned = Math.max(0, Math.floor(copperTotal + 0.0001));\n\n  if (copperEarned > 0) {\n    const currentCopper = coinsToCopper(actor.system?.currencies ?? {});\n    const updatedCoins = copperToCoins(currentCopper + copperEarned);\n    await actor.update({ \"system.currencies\": updatedCoins });\n  }\n\n  const itemIds = sellable.map((item) => item.id).filter(Boolean);\n  if (itemIds.length) {\n    await actor.deleteEmbeddedDocuments(\"Item\", itemIds);\n  }\n\n  const message = copperEarned > 0 ? formatCoins(copperToCoins(copperEarned)) : \"0 cp\";\n  const soldCount = sellable.length;\n  ui.notifications?.info?.(\n    `${game.i18n.localize?.(\"PF2E.SellPromptTitle\") ?? \"Sell for gold\"}: ${soldCount} ${soldCount === 1 ? \"item\" : \"items\"} â†’ ${message}`\n  );\n};\n\nconst openSellDialog = (actor) => {\n  const content = `\n    <form>\n      <div class=\"form-group\">\n        <label>${game.i18n.localize?.(\"PF2E.SellPercentage\") ?? \"Sell percentage\"}</label>\n        <input type=\"number\" name=\"sell-percentage\" value=\"50\" min=\"0\" max=\"100\" step=\"1\" />\n        <p class=\"notes\">${game.i18n.localize?.(\"PF2E.SellTreasureNote\") ?? \"Treasure items are sold at 100%.\"}</p>\n      </div>\n    </form>\n  `;\n\n  const dialog = new Dialog({\n    title: game.i18n.localize?.(\"PF2E.SellPromptTitle\") ?? \"Sell for gold\",\n    content,\n    default: \"sell\",\n    buttons: {\n      cancel: {\n        label: game.i18n.localize?.(\"Cancel\") ?? game.i18n.localize?.(\"PF2E.Cancel\") ?? \"Cancel\",\n      },\n      sell: {\n        icon: \"<i class=\\\"fas fa-coins\\\"></i>\",\n        label: game.i18n.localize?.(\"PF2E.Actions.Sell.Label\") ?? \"Sell\",\n        callback: (html) => {\n          const input = html?.find?.('input[name=\"sell-percentage\"]')?.[0];\n          const percent = Number(input?.value ?? 50);\n          performSale(actor, percent).catch((error) => {\n            console.error(\"Sell macro | Failed to sell items\", error);\n            ui.notifications?.error?.(game.i18n.localize?.(\"ERROR\") ?? \"Failed to sell items.\");\n          });\n        },\n      },\n    },\n  });\n\n  dialog.render(true);\n};\n\nconst resolveSellActor = () => {\n  const controlled = canvas?.tokens?.controlled?.[0]?.actor;\n  if (controlled?.type === \"loot\" && controlled.name === SELL_LOOT_ACTOR_NAME) return controlled;\n\n  const openSheet = Object.values(ui.windows ?? {}).find(\n    (app) => app?.actor?.type === \"loot\" && app?.actor?.name === SELL_LOOT_ACTOR_NAME\n  );\n  if (openSheet?.actor) return openSheet.actor;\n\n  const sidebarActor = game?.actors?.getName?.(SELL_LOOT_ACTOR_NAME);\n  if (sidebarActor?.type === \"loot\") return sidebarActor;\n\n  ui.notifications?.warn?.(`Sell macro | Could not find the \"${SELL_LOOT_ACTOR_NAME}\" loot actor.`);\n  return null;\n};\n\nconst actor = resolveSellActor();\nif (actor) openSellDialog(actor);\n", "folder": null, "sort": 100, "ownership": {"default": 0}, "flags": {"core": {"sourceId": "Compendium.kazguls-pf2e-macros.macros.q96u1cP1A8JZhiyx"}}, "_stats": {"systemId": "pf2e", "systemVersion": "5.7.0", "coreVersion": "11.309", "createdTime": 0, "modifiedTime": 0, "lastModifiedBy": null}}
{"_id": "UGLf9p2atuM8gIpM", "name": "Quick Damage Roller", "type": "script", "scope": "global", "author": null, "img": "icons/svg/explosion.svg", "command": "const prompt =\n  globalThis.kazgulsPf2e?.quickPrompt ?? globalThis.kazgulsPf2e?.quickDamagePrompt;\nif (prompt) {\n  prompt();\n} else {\n  ui.notifications?.warn?.(\"Quick roller prompt is not available. Ensure Kazgul's PF2e Macros module is active.\");\n}", "folder": null, "sort": 200, "ownership": {"default": 0}, "flags": {"core": {"sourceId": "Compendium.kazguls-pf2e-macros.macros.UGLf9p2atuM8gIpM"}}, "_stats": {"systemId": "pf2e", "systemVersion": "5.7.0", "coreVersion": "11.309", "createdTime": 1761134487719, "modifiedTime": 1761134487719, "lastModifiedBy": null}}
